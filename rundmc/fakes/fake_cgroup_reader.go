// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/guardian/rundmc"
	"github.com/opencontainers/specs"
	"github.com/pivotal-golang/lager"
)

type FakeCgroupReader struct {
	CPUCgroupStub        func(log lager.Logger, handle string) (specs.CPU, error)
	cPUCgroupMutex       sync.RWMutex
	cPUCgroupArgsForCall []struct {
		log    lager.Logger
		handle string
	}
	cPUCgroupReturns struct {
		result1 specs.CPU
		result2 error
	}
}

func (fake *FakeCgroupReader) CPUCgroup(log lager.Logger, handle string) (specs.CPU, error) {
	fake.cPUCgroupMutex.Lock()
	fake.cPUCgroupArgsForCall = append(fake.cPUCgroupArgsForCall, struct {
		log    lager.Logger
		handle string
	}{log, handle})
	fake.cPUCgroupMutex.Unlock()
	if fake.CPUCgroupStub != nil {
		return fake.CPUCgroupStub(log, handle)
	} else {
		return fake.cPUCgroupReturns.result1, fake.cPUCgroupReturns.result2
	}
}

func (fake *FakeCgroupReader) CPUCgroupCallCount() int {
	fake.cPUCgroupMutex.RLock()
	defer fake.cPUCgroupMutex.RUnlock()
	return len(fake.cPUCgroupArgsForCall)
}

func (fake *FakeCgroupReader) CPUCgroupArgsForCall(i int) (lager.Logger, string) {
	fake.cPUCgroupMutex.RLock()
	defer fake.cPUCgroupMutex.RUnlock()
	return fake.cPUCgroupArgsForCall[i].log, fake.cPUCgroupArgsForCall[i].handle
}

func (fake *FakeCgroupReader) CPUCgroupReturns(result1 specs.CPU, result2 error) {
	fake.CPUCgroupStub = nil
	fake.cPUCgroupReturns = struct {
		result1 specs.CPU
		result2 error
	}{result1, result2}
}

var _ rundmc.CgroupReader = new(FakeCgroupReader)
